{"version":3,"sources":["file:///Users/takeda.naomichi/Desktop/QuizTestProject/assets/Script/UI/Timer.ts"],"names":["_decorator","Component","Graphics","Label","ccclass","property","Timer","elapsed_time","time_limit","isFinish","isEnd","start","Reset","SetTimeLimit","limit","GetTimeLeft","GetIsFinish","GetIsEnd","Display","second","Math","ceil","minutes","floor","time_display","string","slice","_endAngle","PI","time_circle","fillColor","fromHEX","lineWidth","clear","arc","lineTo","close","stroke","fill","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,K,OAAAA,K;;;;;;;;;OAC1C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;uBAGjBM,K,WADZF,OAAO,CAAC,OAAD,C,UAEHC,QAAQ,CAACH,QAAD,C,UAGRG,QAAQ,CAACF,KAAD,C,2BALb,MACaG,KADb,SAC2BL,SAD3B,CACqC;AAAA;AAAA;;AAAA;;AAAA;;AAAA,eAOzBM,YAPyB,GAOD,CAPC;AAAA,eASzBC,UATyB,GASH,MATG;AAAA,eAWzBC,QAXyB,GAWJ,KAXI;AAAA,eAYzBC,KAZyB,GAYP,KAZO;AAAA;;AAcjCC,QAAAA,KAAK,GAAG,CACP;;AAEMC,QAAAA,KAAK,GACZ;AACI,eAAKL,YAAL,GAAoB,CAApB;AACH;;AAEMM,QAAAA,YAAY,CAACC,KAAD,EACnB;AACI,eAAKN,UAAL,GAAkBM,KAAlB;AACH;;AAEMC,QAAAA,WAAW,GAClB;AACI,iBAAQ,KAAKP,UAAL,GAAkB,KAAKD,YAA/B;AACH;;AAEMS,QAAAA,WAAW,GAAY;AAC1B,iBAAO,KAAKP,QAAZ;AACH;;AAEMQ,QAAAA,QAAQ,GAAY;AACvB,iBAAO,KAAKP,KAAZ;AACH;;AAEMQ,QAAAA,OAAO,GACd;AACI,cAAG,KAAKT,QAAR,EAAiB,KAAKA,QAAL,GAAgB,KAAhB;AAEjB,cAAIU,MAAM,GAAGC,IAAI,CAACC,IAAL,CAAU,CAAC,KAAKb,UAAL,GAAkB,KAAKD,YAAxB,IAAwC,IAAlD,CAAb;AACA,cAAIe,OAAO,GAAGF,IAAI,CAACG,KAAL,CAAWJ,MAAM,GAAG,IAApB,CAAd;AACAA,UAAAA,MAAM,IAAI,EAAV,CALJ,CAOI;;AACA,eAAKK,YAAL,CAAkBC,MAAlB,GAA2B,CAAC,OAAOH,OAAR,EAAiBI,KAAjB,CAAuB,CAAC,CAAxB,IAA6B,GAA7B,GAAmC,CAAC,OAAOP,MAAR,EAAgBO,KAAhB,CAAsB,CAAC,CAAvB,CAA9D,CARJ,CAUI;;AACA,cAAIC,SAAS,GAAG,CAAC,MAAM,OAAO,KAAKpB,YAAL,GAAoB,KAAKC,UAAhC,CAAP,IAAsDY,IAAI,CAACQ,EAA3E,CAXJ,CAYI;;;AAEA,eAAKC,WAAL,CAAiBC,SAAjB,CAA2BC,OAA3B,CAAmC,SAAnC;AACA,eAAKF,WAAL,CAAiBG,SAAjB,GAA6B,CAA7B;AAEA,eAAKH,WAAL,CAAiBI,KAAjB;AACA,eAAKJ,WAAL,CAAiBK,GAAjB,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,EAA3B,EAA+B,MAAMd,IAAI,CAACQ,EAA1C,EAA8CD,SAA9C,EAAyD,IAAzD;AACA,eAAKE,WAAL,CAAiBM,MAAjB,CAAwB,CAAxB,EAA2B,CAA3B;AACA,eAAKN,WAAL,CAAiBO,KAAjB;AACA,eAAKP,WAAL,CAAiBQ,MAAjB;AACA,eAAKR,WAAL,CAAiBS,IAAjB;;AACA,cAAG,KAAK/B,YAAL,GAAoB,KAAKC,UAA5B,EAAuC;AACnC,iBAAKD,YAAL,IAAqB,CAArB;AACH,WAFD,MAGI;AACA,gBAAG,CAAC,KAAKG,KAAT,EAAe;AACX,mBAAKA,KAAL,GAAa,IAAb;AACA,mBAAKD,QAAL,GAAgB,IAAhB;AACH;AACJ;AACJ;;AAED8B,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AA7EgC,O;;;;;iBAER,I;;;;;;;iBAGF,I","sourcesContent":["import { _decorator, Component, Node, Graphics, Label } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Timer')\nexport class Timer extends Component {\n    @property(Graphics)\n    time_circle : Graphics = null;\n\n    @property(Label)\n    time_display : Label = null;\n\n    private elapsed_time : number = 0;\n\n    private time_limit : number = 1800.0;\n\n    private isFinish : boolean = false;\n    private isEnd : boolean = false;\n\n    start() {\n    }\n\n    public Reset()\n    {\n        this.elapsed_time = 0;\n    }\n\n    public SetTimeLimit(limit: number)\n    {\n        this.time_limit = limit;\n    }\n\n    public GetTimeLeft()\n    {\n        return (this.time_limit - this.elapsed_time);\n    }\n\n    public GetIsFinish() : boolean{\n        return this.isFinish;\n    }\n\n    public GetIsEnd() : boolean{\n        return this.isEnd;\n    }\n\n    public Display()\n    {\n        if(this.isFinish)this.isFinish = false;\n\n        let second = Math.ceil((this.time_limit - this.elapsed_time) / 60.0);\n        let minutes = Math.floor(second / 60.0);\n        second %= 60;\n\n        // 時間を表示\n        this.time_display.string = (\"00\" + minutes).slice(-2) + \":\" + (\"00\" + second).slice(-2);\n\n        //　時間（サークル）を表示\n        let _endAngle = (0.5 - 2.0 * (this.elapsed_time / this.time_limit)) * Math.PI;\n        // console.log(_endAngle);\n        \n        this.time_circle.fillColor.fromHEX('#00FFFF');\n        this.time_circle.lineWidth = 2;\n\n        this.time_circle.clear();\n        this.time_circle.arc(0, 0, 30, 0.5 * Math.PI, _endAngle, true);\n        this.time_circle.lineTo(0, 0);\n        this.time_circle.close();\n        this.time_circle.stroke();\n        this.time_circle.fill();\n        if(this.elapsed_time < this.time_limit){\n            this.elapsed_time += 1;\n        }\n        else{\n            if(!this.isEnd){\n                this.isEnd = true;\n                this.isFinish = true;\n            }\n        }\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n"]}