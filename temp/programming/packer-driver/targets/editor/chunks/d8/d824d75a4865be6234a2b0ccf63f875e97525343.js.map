{"version":3,"sources":["file:///Users/takeda.naomichi/Desktop/QuizTestProject/assets/Script/Game/Manager/QuizModalManager.ts"],"names":["_decorator","Component","Node","instantiate","Prefab","ChoicesModal","OverallResultModal","QuestionModal","ResultModal","GameManager","ccclass","property","ModalType","None","Question","Choices","Result","Overall","QuizModalManager","question","choices","result","overall","debugClientMode","debugNowType","Instance","instance","start","temp","questionPrefab","setParent","canvas","active","getComponent","choicesPrefab","resultPrefab","overallPrefab","update","deltaTime","OnUpdate","ChangeModal","nextType","node","Initialize","GetGameInfo","qType","Reset","GetQuestionModal","GetChoicesModal","GetResultModal","GetOverallResultModal"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, instantiate, Prefab, Canvas, Button, Label } from 'cc';\nimport { ChoicesModal } from '../Modal/ChoicesModal';\nimport { OverallResultModal } from '../Modal/OverallResultModal';\nimport { QuestionModal } from '../Modal/QuestionModal';\nimport { ResultModal } from '../Modal/ResultModal';\nimport { WaitModal } from '../Modal/WaitModal';\nimport { ClientMode, GameManager } from './GameManager';\nconst { ccclass, property } = _decorator;\n\nconst ModalType = {\n    None     : 'None',\n    Question : 'Question',\n    Choices  : 'Choices',\n    Result   : 'Result',\n    Overall  : 'Overall',\n} as const;\n\nexport type ModalType = typeof ModalType[keyof typeof ModalType];\n\n@ccclass('QuizModalManager')\nexport class QuizModalManager extends Component {\n\n    private static instance : QuizModalManager;\n    \n    public static Instance() : QuizModalManager {\n        if(!QuizModalManager.instance){\n            QuizModalManager.instance = new QuizModalManager();\n        }\n\n        return QuizModalManager.instance;\n    }\n\n    @property(Node)\n    canvas : Node = null;\n    @property(Prefab)\n    private questionPrefab : Prefab = null;\n    @property(Prefab)\n    private choicesPrefab : Prefab = null;\n    @property(Prefab)\n    private resultPrefab : Prefab = null;\n    @property(Prefab)\n    private overallPrefab : Prefab = null;\n\n    private question : QuestionModal = null;\n    private choices : ChoicesModal = null;\n    private result : ResultModal = null;\n    private overall : OverallResultModal = null;\n\n    private debugClientMode : ClientMode = 'Liver';\n    private debugNowType : ModalType = 'Question';\n\n    start() {\n        QuizModalManager.instance = this;\n\n        var temp = instantiate(this.questionPrefab);\n        temp.setParent(this.canvas);\n        temp.active = false;\n        this.question = temp.getComponent(QuestionModal);\n\n        temp = instantiate(this.choicesPrefab);\n        temp.setParent(this.canvas);\n        temp.active = false;\n        this.choices = temp.getComponent(ChoicesModal);\n\n        temp = instantiate(this.resultPrefab);\n        temp.setParent(this.canvas);\n        temp.active = false;\n        this.result = temp.getComponent(ResultModal);\n\n        temp = instantiate(this.overallPrefab);\n        temp.setParent(this.canvas);\n        temp.active = false;\n        this.overall = temp.getComponent(OverallResultModal);\n    }\n\n    update(deltaTime: number) {\n        //this.DebugClientMode();\n    }\n\n    public OnUpdate(deltaTime : number){\n\n    }\n\n    public ChangeModal(nextType : ModalType){\n        if(nextType === 'Question'){\n            this.choices.node.active = false;\n            this.result.node.active = false;\n            this.overall.node.active = false;\n            this.question.node.active = true;\n            this.question.Initialize(GameManager.Instance().GetGameInfo().qType);\n        }\n        else if(nextType === 'Choices'){\n            this.question.node.active = false;\n            this.choices.node.active = true;\n            this.choices.Initialize();\n        }\n        else if(nextType === 'Overall'){\n            this.question.node.active = false;\n            this.choices.node.active = false;\n            this.overall.node.active = true;\n        }\n\n        this.debugNowType = nextType;\n    }\n\n    public Reset(){\n        \n    }\n\n    public GetQuestionModal() : QuestionModal{\n        return this.question;\n    }\n    public GetChoicesModal() : ChoicesModal{\n        return this.choices;\n    }\n    public GetResultModal() : ResultModal{\n        return this.result;\n    }\n    public GetOverallResultModal() : OverallResultModal{\n        return this.overall;\n    }\n}\n\n"]}