{"version":3,"sources":["file:///Users/takeda.naomichi/Desktop/QuizTestProject/assets/Script/Game/Modal/ChoicesModal.ts"],"names":["_decorator","Component","Node","Button","Label","Sprite","GameManager","QuizModalManager","BetModal","ccclass","property","ChoicesModal","choiceNumber","debugClientMode","start","buttonList","node","on","EventType","CLICK","Choice","betModal","active","update","deltaTime","DebugModalUpdate","GetIsDecide","DecideChoice","index","SetChoices","text","sprite","labelList","string","spriteList","spriteFrame","GetChoics","SetQuestion","sent","questionLabel","Initialize","Instance","GetClientMode","liverNode","userNode","odds","oddsLabelList","ChangeModal","GetResultModal","SetCoinLabel","Array"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Button, Label, SpriteFrame, Sprite, Prefab, instantiate } from 'cc';\nimport { ClientMode, GameManager } from '../Manager/GameManager';\nimport { QuizModalManager } from '../Manager/QuizModalManager';\nimport { BetModal } from './BetModal';\nimport { ResultModal } from './ResultModal';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ChoicesModal')\nexport class ChoicesModal extends Component {\n\n    @property(Node)\n    private liverNode : Node = null;\n    @property(Node)\n    private userNode : Node = null;\n    @property(Button)\n    buttonList : Array<Button> = new Array<Button>();\n    @property(Label)\n    labelList : Array<Label> = new Array<Label>();\n    @property(Sprite)\n    spriteList : Array<Sprite> = new Array<Sprite>();\n    @property(Label)\n    private oddsLabelList : Array<Label> = new Array<Label>();\n    @property(Label)\n    private betLabelList : Array<Label> = new Array<Label>();\n    @property(Label)\n    private questionLabel : Label = null;\n    @property(BetModal)\n    private betModal : BetModal = null; \n\n    choiceNumber : number = -1;\n    private debugClientMode : ClientMode = 'Liver';\n\n    start() {\n        this.buttonList[0].node.on(Button.EventType.CLICK, function(){this.Choice(0);}, this);\n        this.buttonList[1].node.on(Button.EventType.CLICK, function(){this.Choice(1);}, this);\n        this.buttonList[2].node.on(Button.EventType.CLICK, function(){this.Choice(2);}, this);\n        this.buttonList[3].node.on(Button.EventType.CLICK, function(){this.Choice(3);}, this);\n        this.buttonList[4].node.on(Button.EventType.CLICK, function(){this.Choice(4);}, this);\n        this.buttonList[5].node.on(Button.EventType.CLICK, function(){this.Choice(5);}, this);\n        this.betModal.node.active = false;\n    }\n\n    update(deltaTime: number) {\n        this.DebugModalUpdate();\n\n        if(this.betModal.GetIsDecide()){\n            this.DecideChoice();\n        }\n    }\n\n    // クリックした時\n    private Choice(index : number) {\n        this.betModal.node.active = true;    // ベットモーダルを表示\n        this.choiceNumber = index;      // 選択した番号\n    }\n\n    // 選択肢を設定\n    public SetChoices(index : number, text : string, sprite : SpriteFrame){\n        this.labelList[index].string = text;\n        this.spriteList[index].spriteFrame = sprite;\n    }\n\n    \n    public GetChoics() : number{\n        return this.choiceNumber;\n    }\n\n    public SetQuestion(sent : string){\n        this.questionLabel.string = sent;\n    }\n\n    private Initialize(){\n        if(GameManager.Instance().GetClientMode() === 'Liver'){\n            this.liverNode.active = true;\n            this.userNode.active = false;\n            for(const odds of this.oddsLabelList){\n                odds.node.active = true;\n            }\n            this.debugClientMode = 'Liver';\n        }\n        else{\n            this.liverNode.active = false;\n            this.userNode.active = true;\n            for(const odds of this.oddsLabelList){\n                odds.node.active = false;\n            }\n            this.debugClientMode = 'User';\n        }\n    }\n\n    private DecideChoice(){\n        QuizModalManager.Instance().ChangeModal('Result');\n        QuizModalManager.Instance().GetResultModal().SetCoinLabel(\"400\");\n    }\n\n    private DebugModalUpdate(){\n        if(GameManager.Instance().GetClientMode() != this.debugClientMode){\n            this.Initialize();\n        }\n    }\n}\n\n"]}