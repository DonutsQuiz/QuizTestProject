{"version":3,"sources":["file:///Users/takeda.naomichi/Desktop/QuizTestProject/assets/Script/Game/Quiz/GestureQuiz.ts"],"names":["_decorator","math","GameManager","QuizManager","QuizModalManager","QuizDataBase","QuizComponent","ccclass","property","GestureQuiz","mSprite","mData","debugClientMode","start","update","deltaTime","DebugClientMode","SetQuiz","Instance","GetData","DecisionAnswer","GetGameInfo","qType","mType","qNumber","mNumber","GetClientMode","mSentence","qSentence","qCorNumber","mAnswer","qCorSprite","GetQuestionModal","SetNumber","SetSentence","SetSprite","index","tempind","GetChoicesModal","SetQuestion","i","GetChoiceMax","select","tempdata","result","n","mIndex","qIncSprite","SetChoices","GetResultModal","SetAnswerLabel","SetAnswerSprite","Initialize","Reset","count","GetDataList","length","randomRangeInt"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, SpriteFrame, math, SphereColliderComponent } from 'cc';\nimport { ClientMode, GameManager } from '../Manager/GameManager';\nimport { QuizManager } from '../Manager/QuizManager';\nimport { QuizModalManager } from '../Manager/QuizModalManager';\nimport { GestureData } from './Data/QuizData';\nimport { QuizDataBase } from './Data/QuizDataBase';\nimport { QuizComponent } from './QuizComponent';\nconst { ccclass, property } = _decorator;\n\n\n\n@ccclass('GestureQuiz')\nexport class GestureQuiz extends QuizComponent {\n\n    mSprite : SpriteFrame;  // 問題の画像\n    mData : GestureData;\n\n    private debugClientMode : ClientMode = 'Liver';\n\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        this.DebugClientMode();\n    }\n\n    public SetQuiz(){\n\n        // デバッグ用(本当はサーバーからもらってくる)\n        this.mData = QuizDataBase.Instance().GetData<GestureData>('Gesture', this.DecisionAnswer());\n        GameManager.Instance().GetGameInfo().qType = this.mType;\n        GameManager.Instance().GetGameInfo().qNumber = this.mNumber;\n        if(GameManager.Instance().GetClientMode() === 'Liver'){this.mSentence = \"この顔を演じてください\";}\n        else{this.mSentence = \"どの顔文字を演じているでしょう\";}\n        GameManager.Instance().GetGameInfo().qSentence = this.mSentence;\n        GameManager.Instance().GetGameInfo().qCorNumber = this.mData.mAnswer;\n        GameManager.Instance().GetGameInfo().qCorSprite = this.mData.mSprite;\n        // ここまで\n\n        this.mData.mAnswer = GameManager.Instance().GetGameInfo().qCorNumber;\n        this.mData.mSprite = GameManager.Instance().GetGameInfo().qCorSprite;\n\n        // 問題文\n        QuizModalManager.Instance().GetQuestionModal().SetNumber(++GameManager.Instance().GetGameInfo().qNumber);\n        QuizModalManager.Instance().GetQuestionModal().SetSentence(GameManager.Instance().GetGameInfo().qSentence);\n        QuizModalManager.Instance().GetQuestionModal().SetSprite(this.mSprite = this.mData.mSprite);\n\n\n        // 選択肢\n        var index : number = 0;\n        var tempind : boolean[] = [false, false, false];\n        QuizModalManager.Instance().GetChoicesModal().SetQuestion(\"どの顔を演じている?\");\n        for(var i : number = 0; i < QuizManager.Instance().GetChoiceMax(); i++){\n            var select : string;\n            if(i === 0){select = \"A\";}\n            else if(i === 1){select = \"B\";}\n            else if(i === 2){select = \"C\";}\n            else if(i === 3){select = \"D\";}\n\n            // デバッグ用\n            if(i != this.mData.mAnswer){\n                var tempdata : GestureData = null\n                do {\n                    tempdata = QuizDataBase.Instance().GetData<GestureData>('Gesture', this.DecisionAnswer());\n                    var result : Boolean = false;\n                    for(var n = 0; n < QuizManager.Instance().GetChoiceMax() - 1; n++){\n                        if(tempdata.mIndex === this.mData.mIndex || GameManager.Instance().GetGameInfo().qIncSprite[n] === tempdata.mSprite){\n                            result = false;\n                            break;\n                        }\n\n                        if(tempind[n] === false){\n                            GameManager.Instance().GetGameInfo().qIncSprite[n] = tempdata.mSprite;\n                            tempind[n] = true;\n                            result = true;\n                            break;\n                        }\n                    }\n                } while (!result);\n            }\n\n            if(i === this.mData.mAnswer){\n                QuizModalManager.Instance().GetChoicesModal().SetChoices(i, select, GameManager.Instance().GetGameInfo().qCorSprite);\n            }\n            else{\n                QuizModalManager.Instance().GetChoicesModal().SetChoices(i, select, GameManager.Instance().GetGameInfo().qIncSprite[index]);\n                index++;\n            }\n        }\n\n        // 結果\n        QuizModalManager.Instance().GetChoicesModal().GetResultModal().SetAnswerLabel(this.mData.mAnswer ,\"\");\n        QuizModalManager.Instance().GetChoicesModal().GetResultModal().SetAnswerSprite(this.mSprite);        \n    }\n\n    public Initialize(){\n        super.Reset();\n        QuizModalManager.Instance().GetQuestionModal().Initialize(this.mType = 'Gesture');\n        this.mSprite = null;  // 問題の画像\n        this.mData = null;\n    }\n\n    private DecisionAnswer() : number{\n        var count = QuizDataBase.Instance().GetDataList<GestureData>('Gesture').length;\n        return math.randomRangeInt(0, count);\n    }\n\n    // public GetData() : GestureData{\n    //     return this.mData;\n    // }\n\n    private DebugClientMode(){\n        if(GameManager.Instance().GetClientMode() != this.debugClientMode){\n            if(GameManager.Instance().GetClientMode() === 'Liver'){\n                this.mSentence = \"この顔を演じてください\";\n                this.debugClientMode = 'Liver';\n            }\n            else{\n                this.mSentence = \"どの顔を演じているでしょう\";\n                this.debugClientMode = 'User';\n            }\n            QuizModalManager.Instance().GetQuestionModal().SetSentence(this.mSentence);\n        }\n    }\n}\n\n"]}