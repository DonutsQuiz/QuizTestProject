{"version":3,"sources":["file:///Users/takeda.naomichi/Desktop/QuizTestProject/assets/Script/Game/Modal/ChoicesModal.ts"],"names":["_decorator","Component","Node","Button","Label","Sprite","Vec3","ChipControll","Timer","GameManager","QuizModalManager","BetModal","ResultModal","ccclass","property","ChoicesModal","choiceNumber","tempNumber","debugClientMode","isNext","start","buttonList","node","on","EventType","CLICK","Choice","nextButton","Next","resultButton","ShowResult","update","deltaTime","DebugModalUpdate","timer","Display","GetIsFinish","active","odds","oddsLabelList","betModal","GetIsEnd","DontClickButton","GetIsDecide","DecideChoice","SetIsDecide","index","SetChoices","text","sprite","labelList","string","spriteList","spriteFrame","GetChoics","SetQuestion","sent","questionLabel","Initialize","SetTimeLimit","Instance","GetGameInfo","thinkTime","qSentence","resultModal","liverAnswerFrameSprite","position","qAnswer","GetClientMode","liverNode","userNode","userAnswerFrameSprite","coinsLabel","coins","toString","chipAnim","Play","ChangeModal","GetResultModal","SetCoinLabel","is","buttons","isResult","Array"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Button, Label, SpriteFrame, Sprite, Vec3 } from 'cc';\nimport { ChipControll } from '../../Chip/ChipControll';\nimport { Timer } from '../../UI/Timer';\nimport { ClientMode, GameManager } from '../Manager/GameManager';\nimport { QuizModalManager } from '../Manager/QuizModalManager';\nimport { BetModal } from './BetModal';\nimport { ResultModal } from './ResultModal';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ChoicesModal')\nexport class ChoicesModal extends Component {\n\n    @property(Node) // ライバー側\n    private liverNode : Node = null;\n    @property(Node) // ユーザー側\n    private userNode : Node = null;\n    @property(Button) // 選択肢（ボタン）\n    buttonList : Array<Button> = new Array<Button>();\n    @property(Node) // 選択肢（枠）\n    frameList : Array<Node> = new Array<Node>();\n    @property(Label) // 選択肢（文字）\n    labelList : Array<Label> = new Array<Label>();\n    @property(Sprite)// 選択肢（画像）\n    spriteList : Array<Sprite> = new Array<Sprite>();\n    @property(Label)// オッズ\n    private oddsLabelList : Array<Label> = new Array<Label>();\n    @property(Label)// 総ベット量\n    private betLabelList : Array<Label> = new Array<Label>();\n    @property(Label)// 問題文\n    private questionLabel : Label = null;\n    @property(Label)// 所持コイン\n    private coinsLabel : Label = null;\n    @property(BetModal)// ベットモーダル\n    private betModal : BetModal = null; \n    @property(Button)// 次に進むボタン\n    private nextButton : Button = null;\n    @property(Button)// 結果表示ボタン\n    private resultButton : Button = null;\n    @property(Node)// 答えの枠\n    private liverAnswerFrameSprite : Node = null;\n    @property(Node)// 選択した枠\n    private userAnswerFrameSprite : Node = null;\n\n    @property(ResultModal) // リザルトモーダル\n    private resultModal : ResultModal = null;\n\n    @property(Timer)\n    timer : Timer = null;\n    @property(ChipControll)\n    chipAnim : ChipControll = null;\n\n    choiceNumber : number = -1;\n    private tempNumber : number = 0;\n    private debugClientMode : ClientMode = 'Liver';\n\n    isNext : boolean = false;\n\n    start() {\n        this.buttonList[0].node.on(Button.EventType.CLICK, function(){this.Choice(0);}, this);\n        this.buttonList[1].node.on(Button.EventType.CLICK, function(){this.Choice(1);}, this);\n        this.buttonList[2].node.on(Button.EventType.CLICK, function(){this.Choice(2);}, this);\n        this.buttonList[3].node.on(Button.EventType.CLICK, function(){this.Choice(3);}, this);\n        this.buttonList[4].node.on(Button.EventType.CLICK, function(){this.Choice(4);}, this);\n        this.buttonList[5].node.on(Button.EventType.CLICK, function(){this.Choice(5);}, this);\n        this.nextButton.node.on( Button.EventType.CLICK, this.Next, this);\n        this.resultButton.node.on( Button.EventType.CLICK, this.ShowResult, this);\n    }\n\n    update(deltaTime: number) {\n        this.DebugModalUpdate();\n\n        this.timer.Display();\n\n        // 時間切れの処理\n        if(this.timer.GetIsFinish()){\n            this.resultButton.node.active = true;\n            for(const odds of this.oddsLabelList){\n                odds.node.active = true;\n            }\n        }\n\n        // ベットモーダルが出ている時は選択肢を押せないようにする\n        if(this.betModal.node.active || this.timer.GetIsEnd()){\n            this.DontClickButton(false);\n        }\n        else{\n            this.DontClickButton(true);\n        }\n\n        if(this.betModal.GetIsDecide()){\n            this.DecideChoice();\n            this.betModal.SetIsDecide(false);\n        }\n    }\n\n    // クリックした時\n    private Choice(index : number) {\n        this.betModal.node.active = true;    // ベットモーダルを表示\n        this.tempNumber = index;      // 選択した番号\n    }\n\n    // 選択肢を設定\n    public SetChoices(index : number, text : string, sprite : SpriteFrame){\n        this.labelList[index].string = text;\n        this.spriteList[index].spriteFrame = sprite;\n    }\n\n    \n    public GetChoics() : number{\n        return this.choiceNumber;\n    }\n\n    public SetQuestion(sent : string){\n        this.questionLabel.string = sent;\n    }\n\n    public Initialize(){\n        this.timer.SetTimeLimit(GameManager.Instance().GetGameInfo().thinkTime);   // タイマーのセット\n        this.questionLabel.string = GameManager.Instance().GetGameInfo().qSentence;\n        this.betModal.node.active = false;\n        this.resultModal.node.active = false;\n        this.liverAnswerFrameSprite.position = new Vec3(this.buttonList[GameManager.Instance().GetGameInfo().qAnswer].node.position);\n\n        if(GameManager.Instance().GetClientMode() === 'Liver'){\n            this.liverNode.active = true;\n            this.userNode.active = false;\n            for(const odds of this.oddsLabelList){\n                odds.node.active = true;\n            }\n            this.liverAnswerFrameSprite.active = true;\n            this.nextButton.node.active = false;\n            this.resultButton.node.active = false;\n            this.debugClientMode = 'Liver';\n\n        }\n        else{\n            this.liverNode.active = false;\n            this.userNode.active = true;\n            for(const odds of this.oddsLabelList){\n                odds.node.active = false;\n            }\n            if(this.resultModal.node.active){\n                this.liverAnswerFrameSprite.active = true;\n            }\n            else{\n                this.liverAnswerFrameSprite.active = false;\n            }\n            this.userAnswerFrameSprite.active = false;\n            this.coinsLabel.string = GameManager.Instance().GetGameInfo().coins.toString();\n            this.debugClientMode = 'User';\n        }\n    }\n\n    private DecideChoice(){\n        this.choiceNumber = this.tempNumber;\n        this.userAnswerFrameSprite.active = true;\n        this.userAnswerFrameSprite.position = new Vec3(this.buttonList[this.choiceNumber].node.position);\n        this.chipAnim.Play();\n    }\n\n    // 正解表示\n    private ShowResult(){\n        this.resultButton.node.active = false;\n        this.nextButton.node.active = true;\n        this.resultModal.node.active = true;\n        this.liverAnswerFrameSprite.active = true;\n    }\n\n    private Next(){\n        this.isNext = true;\n        this.resultModal.node.active = false;\n        QuizModalManager.Instance().ChangeModal('Question');\n        QuizModalManager.Instance().GetResultModal().SetCoinLabel(\"400\");\n    }\n\n    // ボタンを押せないようにする\n    private DontClickButton(is : boolean){\n        for(const buttons of this.buttonList){\n            buttons.node.active = is;\n        }\n    }\n\n    private DebugModalUpdate(){\n        if(GameManager.Instance().GetClientMode() != this.debugClientMode){\n            var isResult : boolean = false;\n            if(this.resultModal.node.active) isResult = true;\n\n            this.Initialize();\n\n            if(this.timer.GetIsEnd()){\n                this.resultButton.node.active = true;\n                for(const odds of this.oddsLabelList){\n                    odds.node.active = true;\n                }\n            }\n\n            if(isResult){\n                this.resultModal.node.active = true;\n                this.liverAnswerFrameSprite.active = true;\n            }\n        }\n    }\n\n    public GetResultModal() : ResultModal{\n        return this.resultModal;\n    }\n}\n\n"]}