{"version":3,"sources":["file:///Users/takeda.naomichi/Desktop/QuizTestProject/assets/Script/Game/Modal/ChoicesModal.ts"],"names":["_decorator","Component","Node","Button","Label","Sprite","ChipControll","Timer","GameManager","BetModal","ccclass","property","ChoicesModal","choiceNumber","tempNumber","debugClientMode","start","timer","SetTimeLimit","Instance","GetPlayerInfo","thinkTime","buttonList","node","on","EventType","CLICK","Choice","coinsLabel","string","coins","toString","betModal","active","update","deltaTime","DebugModalUpdate","Display","GetIsDecide","DecideChoice","index","SetChoices","text","sprite","labelList","spriteList","spriteFrame","GetChoics","SetQuestion","sent","questionLabel","Initialize","GetClientMode","liverNode","userNode","odds","oddsLabelList","chipAnim","Play","DontClickButton","Array"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Button, Label, SpriteFrame, Sprite } from 'cc';\nimport { ChipControll } from '../../Chip/ChipControll';\nimport { Timer } from '../../UI/Timer';\nimport { ClientMode, GameManager } from '../Manager/GameManager';\nimport { QuizModalManager } from '../Manager/QuizModalManager';\nimport { BetModal } from './BetModal';\nimport { ResultModal } from './ResultModal';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ChoicesModal')\nexport class ChoicesModal extends Component {\n\n    @property(Node)\n    private liverNode : Node = null;\n    @property(Node)\n    private userNode : Node = null;\n    @property(Button)\n    buttonList : Array<Button> = new Array<Button>();\n    @property(Label)\n    labelList : Array<Label> = new Array<Label>();\n    @property(Sprite)\n    spriteList : Array<Sprite> = new Array<Sprite>();\n    @property(Label)\n    private oddsLabelList : Array<Label> = new Array<Label>();\n    @property(Label)\n    private betLabelList : Array<Label> = new Array<Label>();\n    @property(Label)\n    private questionLabel : Label = null;\n    @property(Label)\n    private coinsLabel : Label = null;\n    @property(BetModal)\n    private betModal : BetModal = null; \n\n\n    @property(Timer)\n    timer : Timer = null;\n    @property(ChipControll)\n    chipAnim : ChipControll = null;\n\n    choiceNumber : number = -1;\n    private tempNumber : number = 0;\n    private debugClientMode : ClientMode = 'Liver';\n\n    start() {\n        this.timer.SetTimeLimit(GameManager.Instance().GetPlayerInfo().thinkTime);   // タイマーのセット\n        this.buttonList[0].node.on(Button.EventType.CLICK, function(){this.Choice(0);}, this);\n        this.buttonList[1].node.on(Button.EventType.CLICK, function(){this.Choice(1);}, this);\n        this.buttonList[2].node.on(Button.EventType.CLICK, function(){this.Choice(2);}, this);\n        this.buttonList[3].node.on(Button.EventType.CLICK, function(){this.Choice(3);}, this);\n        this.buttonList[4].node.on(Button.EventType.CLICK, function(){this.Choice(4);}, this);\n        this.buttonList[5].node.on(Button.EventType.CLICK, function(){this.Choice(5);}, this);\n        this.coinsLabel.string = GameManager.Instance().GetPlayerInfo().coins.toString();\n        this.betModal.node.active = false;\n    }\n\n    update(deltaTime: number) {\n        this.DebugModalUpdate();\n\n        this.timer.Display();\n\n        if(this.betModal.GetIsDecide()){\n            this.DecideChoice();\n        }\n    }\n\n    // クリックした時\n    private Choice(index : number) {\n        this.betModal.node.active = true;    // ベットモーダルを表示\n        this.tempNumber = index;      // 選択した番号\n    }\n\n    // 選択肢を設定\n    public SetChoices(index : number, text : string, sprite : SpriteFrame){\n        this.labelList[index].string = text;\n        this.spriteList[index].spriteFrame = sprite;\n    }\n\n    \n    public GetChoics() : number{\n        return this.choiceNumber;\n    }\n\n    public SetQuestion(sent : string){\n        this.questionLabel.string = sent;\n    }\n\n    private Initialize(){\n        if(GameManager.Instance().GetClientMode() === 'Liver'){\n            this.liverNode.active = true;\n            this.userNode.active = false;\n            for(const odds of this.oddsLabelList){\n                odds.node.active = true;\n            }\n            this.debugClientMode = 'Liver';\n        }\n        else{\n            this.liverNode.active = false;\n            this.userNode.active = true;\n            for(const odds of this.oddsLabelList){\n                odds.node.active = false;\n            }\n            this.debugClientMode = 'User';\n        }\n    }\n\n    private DecideChoice(){\n        this.choiceNumber = this.tempNumber;\n        //QuizModalManager.Instance().ChangeModal('Result');\n        //QuizModalManager.Instance().GetResultModal().SetCoinLabel(\"400\");\n        this.chipAnim.Play();\n    }\n\n    private DontClickButton(){\n        this.liverNode.active = true;\n        this.userNode.active = false;\n        for(const odds of this.oddsLabelList){\n            odds.node.active = true;\n        }\n        this.debugClientMode = 'Liver';\n    }\n\n    private DebugModalUpdate(){\n        if(GameManager.Instance().GetClientMode() != this.debugClientMode){\n            this.Initialize();\n        }\n    }\n}\n\n"]}