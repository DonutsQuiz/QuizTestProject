{"version":3,"sources":["file:///Users/takeda.naomichi/Desktop/QuizTestProject/assets/Script/Game/Quiz/GestureQuiz.ts"],"names":["_decorator","math","GameManager","QuizManager","QuizModalManager","QuizDataBase","QuizComponent","ccclass","property","GestureQuiz","mSprite","mData","debugClientMode","start","update","deltaTime","DebugClientMode","SetQuiz","DebugChoiceQuestion","mAnswer","Instance","GetGameInfo","qCorNumber","qCorSprite","GetQuestionModal","SetNumber","qNumber","SetSentence","qSentence","SetSprite","index","GetChoicesModal","SetQuestion","i","GetChoiceMax","select","SetChoices","qIncSprite","GetResultModal","SetAnswerLabel","SetAnswerSprite","Initialize","Reset","mType","DecisionAnswer","count","GetDataList","length","randomRangeInt","GetClientMode","mSentence","GetData","qType","mNumber","tempind","tempdata","result","n","mIndex"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, SpriteFrame, math, SphereColliderComponent } from 'cc';\nimport { ClientMode, GameManager } from '../Manager/GameManager';\nimport { QuizManager } from '../Manager/QuizManager';\nimport { QuizModalManager } from '../Manager/QuizModalManager';\nimport { GestureData } from './Data/QuizData';\nimport { QuizDataBase } from './Data/QuizDataBase';\nimport { QuizComponent } from './QuizComponent';\nconst { ccclass, property } = _decorator;\n\n\n\n@ccclass('GestureQuiz')\nexport class GestureQuiz extends QuizComponent {\n\n    mSprite : SpriteFrame;  // 問題の画像\n    mData : GestureData;\n\n    private debugClientMode : ClientMode = 'Liver';\n\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        this.DebugClientMode();\n    }\n\n    public SetQuiz(){\n\n        this.DebugChoiceQuestion();\n\n        this.mData.mAnswer = GameManager.Instance().GetGameInfo().qCorNumber;\n        this.mData.mSprite = GameManager.Instance().GetGameInfo().qCorSprite;\n\n        // 問題文\n        QuizModalManager.Instance().GetQuestionModal().SetNumber(++GameManager.Instance().GetGameInfo().qNumber);\n        QuizModalManager.Instance().GetQuestionModal().SetSentence(GameManager.Instance().GetGameInfo().qSentence);\n        QuizModalManager.Instance().GetQuestionModal().SetSprite(this.mSprite = this.mData.mSprite);\n\n\n        // 選択肢\n        var index : number = 0;\n        QuizModalManager.Instance().GetChoicesModal().SetQuestion(\"どの顔を演じている?\");\n        for(var i : number = 0; i < QuizManager.Instance().GetChoiceMax(); i++){\n            var select : string;\n            if(i === 0){select = \"A\";}\n            else if(i === 1){select = \"B\";}\n            else if(i === 2){select = \"C\";}\n            else if(i === 3){select = \"D\";}\n\n            if(i === this.mData.mAnswer){\n                QuizModalManager.Instance().GetChoicesModal().SetChoices(i, select, GameManager.Instance().GetGameInfo().qCorSprite);\n            }\n            else{\n                QuizModalManager.Instance().GetChoicesModal().SetChoices(i, select, GameManager.Instance().GetGameInfo().qIncSprite[index]);\n                index++;\n            }\n        }\n\n        // 結果\n        QuizModalManager.Instance().GetChoicesModal().GetResultModal().SetAnswerLabel(this.mData.mAnswer ,\"\");\n        QuizModalManager.Instance().GetChoicesModal().GetResultModal().SetAnswerSprite(this.mSprite);        \n    }\n\n    public Initialize(){\n        super.Reset();\n        QuizModalManager.Instance().GetQuestionModal().Initialize(this.mType = 'Gesture');\n        this.mSprite = null;  // 問題の画像\n        this.mData = null;\n    }\n\n    private DecisionAnswer() : number{\n        var count = QuizDataBase.Instance().GetDataList<GestureData>('Gesture').length;\n        return math.randomRangeInt(0, count);\n    }\n\n    // public GetData() : GestureData{\n    //     return this.mData;\n    // }\n\n    private DebugClientMode(){\n        if(GameManager.Instance().GetClientMode() != this.debugClientMode){\n            if(GameManager.Instance().GetClientMode() === 'Liver'){\n                this.mSentence = \"この顔を演じてください\";\n                this.debugClientMode = 'Liver';\n            }\n            else{\n                this.mSentence = \"どの顔を演じているでしょう\";\n                this.debugClientMode = 'User';\n            }\n            QuizModalManager.Instance().GetQuestionModal().SetSentence(this.mSentence);\n        }\n    }\n\n    private DebugChoiceQuestion(){\n\n        this.mData = QuizDataBase.Instance().GetData<GestureData>('Gesture', this.DecisionAnswer());\n        GameManager.Instance().GetGameInfo().qType = this.mType;\n        GameManager.Instance().GetGameInfo().qNumber = this.mNumber;\n        if(GameManager.Instance().GetClientMode() === 'Liver'){this.mSentence = \"この顔を演じてください\";}\n        else{this.mSentence = \"どの顔文字を演じているでしょう\";}\n        GameManager.Instance().GetGameInfo().qSentence = this.mSentence;\n        GameManager.Instance().GetGameInfo().qCorNumber = this.mData.mAnswer;\n        GameManager.Instance().GetGameInfo().qCorSprite = this.mData.mSprite;\n\n        var tempind : boolean[] = [false, false, false];\n        for(var i = 0; i < QuizManager.Instance().GetChoiceMax(); i++){\n            // デバッグ用\n            if(i != this.mData.mAnswer){\n                var tempdata : GestureData = null\n                    do {\n                            tempdata = QuizDataBase.Instance().GetData<GestureData>('Gesture', this.DecisionAnswer());\n                            var result : Boolean = false;\n                            for(var n = 0; n < QuizManager.Instance().GetChoiceMax() - 1; n++){\n                                if(tempdata.mIndex === this.mData.mIndex || GameManager.Instance().GetGameInfo().qIncSprite[n] === tempdata.mSprite){\n                                    result = false;\n                                    break;\n                                }\n                    \n                                if(tempind[n] === false){\n                                    GameManager.Instance().GetGameInfo().qIncSprite[n] = tempdata.mSprite;\n                                    tempind[n] = true;\n                                    result = true;\n                                    break;\n                                }\n                            }\n                    } while (!result);\n            }\n        }\n    }\n}\n\n"]}