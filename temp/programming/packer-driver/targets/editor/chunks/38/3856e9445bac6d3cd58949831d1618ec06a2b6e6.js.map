{"version":3,"sources":["file:///Users/takeda.naomichi/Desktop/QuizTestProject/assets/Script/Game/Modal/ChoicesModal.ts"],"names":["_decorator","Component","Node","Button","Label","Sprite","instantiate","GameManager","QuizModalManager","ccclass","property","ChoicesModal","choiceNumber","debugClientMode","start","buttonList","node","on","EventType","CLICK","Choice","update","deltaTime","DebugModalUpdate","index","bet","betModal","Instance","ChangeModal","GetResultModal","SetCoinLabel","SetChoices","text","sprite","labelList","string","spriteList","spriteFrame","GetChoics","SetQuestion","sent","questionLabel","Initialize","GetClientMode","liverNode","active","userNode","odds","oddsLabelList","Array"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Button, Label, SpriteFrame, Sprite, Prefab, instantiate } from 'cc';\nimport { ClientMode, GameManager } from '../Manager/GameManager';\nimport { QuizModalManager } from '../Manager/QuizModalManager';\nimport { ResultModal } from './ResultModal';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ChoicesModal')\nexport class ChoicesModal extends Component {\n\n    @property(Node)\n    private liverNode : Node = null;\n    @property(Node)\n    private userNode : Node = null;\n    @property(Button)\n    buttonList : Array<Button> = new Array<Button>();\n    @property(Label)\n    labelList : Array<Label> = new Array<Label>();\n    @property(Sprite)\n    spriteList : Array<Sprite> = new Array<Sprite>();\n    @property(Label)\n    private oddsLabelList : Array<Label> = new Array<Label>();\n    @property(Label)\n    private betLabelList : Array<Label> = new Array<Label>();\n    @property(Label)\n    private questionLabel : Label = null;\n    @property(Node)\n    private betModal : Node = null; \n\n    choiceNumber : number = -1;\n    private debugClientMode : ClientMode = 'Liver';\n\n    start() {\n        this.buttonList[0].node.on(Button.EventType.CLICK, function(){this.Choice(0);}, this);\n        this.buttonList[1].node.on(Button.EventType.CLICK, function(){this.Choice(1);}, this);\n        this.buttonList[2].node.on(Button.EventType.CLICK, function(){this.Choice(2);}, this);\n        this.buttonList[3].node.on(Button.EventType.CLICK, function(){this.Choice(3);}, this);\n        this.buttonList[4].node.on(Button.EventType.CLICK, function(){this.Choice(4);}, this);\n        this.buttonList[5].node.on(Button.EventType.CLICK, function(){this.Choice(5);}, this);\n    }\n\n    update(deltaTime: number) {\n        this.DebugModalUpdate();\n    }\n\n    // クリックした時\n    private Choice(index : number) {\n\n        var bet = instantiate(this.betModal);\n\n\n        this.choiceNumber = index;\n        QuizModalManager.Instance().ChangeModal('Result');\n        QuizModalManager.Instance().GetResultModal().SetCoinLabel(\"400\");\n    }\n\n    // 選択肢を設定\n    public SetChoices(index : number, text : string, sprite : SpriteFrame){\n        this.labelList[index].string = text;\n        this.spriteList[index].spriteFrame = sprite;\n    }\n\n    \n    public GetChoics() : number{\n        return this.choiceNumber;\n    }\n\n    public SetQuestion(sent : string){\n        this.questionLabel.string = sent;\n    }\n\n    private Initialize(){\n        if(GameManager.Instance().GetClientMode() === 'Liver'){\n            this.liverNode.active = true;\n            this.userNode.active = false;\n            for(const odds of this.oddsLabelList){\n                odds.node.active = true;\n            }\n            this.debugClientMode = 'Liver';\n        }\n        else{\n            this.liverNode.active = false;\n            this.userNode.active = true;\n            for(const odds of this.oddsLabelList){\n                odds.node.active = false;\n            }\n            this.debugClientMode = 'User';\n        }\n    }\n\n    private DebugModalUpdate(){\n        if(GameManager.Instance().GetClientMode() != this.debugClientMode){\n            this.Initialize();\n        }\n    }\n}\n\n"]}